@border--key: bor;
@border-color--key: borcolor;

// build for each color
each(@allColors, {
  @colorName: @value;
  @colorDefinition: 'color-@{colorName}';

  // singular border color definition
  .@{border-color--key}-@{colorName} {
    border-color: @@colorDefinition;
  }

  // define border size with color
  .recursive-border(5);
  .recursive-border(@iteration) when (@iteration > 0) {
    @borderSize: ~"@{iteration}px";

    // all sides
    .@{border--key}-@{iteration}-@{colorName} {
      border-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    // two sides
    .@{border--key}-v-@{iteration}-@{colorName} {
      border-top-width: @borderSize;
      border-bottom-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    .@{border--key}-h-@{iteration}-@{colorName} {
      border-left-width: @borderSize;
      border-right-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    // one side
    .@{border--key}-t-@{iteration}-@{colorName} {
      border-top-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    .@{border--key}-b-@{iteration}-@{colorName} {
      border-bottom-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    .@{border--key}-l-@{iteration}-@{colorName} {
      border-left-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
    .@{border--key}-r-@{iteration}-@{colorName} {
      border-right-width: @borderSize;
      border-color: @@colorDefinition;
      border-style: solid;
    }
  }
})
