// styling for border color

$border-color--key: map.get($SELECTOR_MAP, "border-color");

@function get_border_color_style_selector($color_name, $direction: false, $mediaquery: false, $pseudoselector: false) {
  $borcolor_selector_base: #{$border-color--key}-#{$color_name};

  // `borcolor-blue`
  @if not $direction and not $mediaquery and not $pseudoselector {
    @return $borcolor_selector_base;
  }

  $direction--key: map.get($DIRECTION_MAP, $direction);
  $borcolor_selector_directional_base: #{$border-color--key}-#{$direction--key}-#{$color_name};

  // `borcolor-t-red`
  @if $direction and not $mediaquery and not $pseudoselector {
    $direction--key: map.get($DIRECTION_MAP, $direction);
    @return $borcolor_selector_directional_base;
  }

  // `s:borcolor-blue`
  @if not $direction and $mediaquery and not $pseudoselector {
     @return get_media_query_selector($borcolor_selector_base, $mediaquery);
  }

  // `borcolor-blue:focus`
  @if not $direction and not $mediaquery and $pseudoselector {
    @return get_pseudoselector_selector($borcolor_selector_base, $pseudoselector);
  }

  // `s:borcolor-t-red`
  @if $direction and $mediaquery and not $pseudoselector {
    $direction--key: map.get($DIRECTION_MAP, $direction);
    @return get_media_query_selector($borcolor_selector_directional_base, $mediaquery);
  }

  // `borcolor-t-red:focus`
  @if $direction and not $mediaquery and $pseudoselector {
    @return get_pseudoselector_selector($borcolor_selector_directional_base, $pseudoselector);
  }

  // `s:borcolor-blue:focus`
  @if not $direction and $mediaquery and $pseudoselector {
    @return get_media_query_selector(get_pseudoselector_selector($borcolor_selector_base, $pseudoselector), $mediaquery);
  }

  // `s:borcolor-t-red:focus`
  @if $direction and $mediaquery and $pseudoselector {
    @return get_media_query_selector(get_pseudoselector_selector($borcolor_selector_directional_base, $pseudoselector), $mediaquery);
  }
}

@mixin generate_border_color_styles($color_name, $direction: false, $mediaquery: false, $pseudoselector: false) {
  $color_value: map.get($COLOR_MAP, $color_name);
  $selector_name_base: get_border_color_style_selector($color_name, $direction, $mediaquery, $pseudoselector);

  // no directions given means all sides
  @if not $direction {
    .#{$selector_name_base} {
      border-color: $color_value;
    }

  // left, right
  } @else if $direction == "horizontal" {
    .#{$selector_name_base} {
      border-left: $color_value;
      border-right: $color_value;
    }

  // top, bottom
  } @else if $direction == "vertical" {
    .#{$selector_name_base} {
      border-top: $color_value;
      border-bottom: $color_value;
    }

  // cardinal directions, eg. left, right, top, down
  } @else {
    .#{$selector_name_base} {
      border-#{$direction}: $color_value;
    }
  }
}

/* start -- border-color*/
@each $color_name, $color_value in $COLOR_MAP {
  // basic version with just colors
  @include generate_border_color_styles($color_name);

  // all directions
  @each $direction_name, $direction_key in $DIRECTION_MAP {
    @include generate_border_color_styles($color_name, $direction_name);

    // breakpoints
    @each $mediaquery, $mq_key in $MEDIA_QUERY_KEY_MAP {
      @include generate_border_color_styles($color_name, $direction_name, $mediaquery);

      // pseudoselectors
      @each $pseudoselector, $ps_key in $PSEUDOSELECTOR_MAP {
        @include generate_border_color_styles($color_name, $direction_name, $mediaquery, $pseudoselector);
      }
    }
  }
}
/* end -- border-color */
