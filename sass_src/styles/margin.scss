$margin--key: map.get($SELECTOR_MAP, "margin");
$margin--base-size: map.get($BASE_SIZE_MAP, "margin");

@function get_margin_style_selector($value, $direction: false, $mediaquery: false, $pseudoselector: false) {
  $mar_selector_base: #{$margin--key}-#{$value};

  // `mar-1`
  @if not $direction and not $mediaquery and not $pseudoselector {
    @return $mar_selector_base;
  }

  $direction--key: map.get($COMMON_DIRECTION_MAP, $direction);
  $mar_selector_directional_base: #{$margin--key}-#{$direction--key}-#{$value};

  // `mar-t-2`
  @if $direction and not $mediaquery and not $pseudoselector {
    $direction--key: map.get($COMMON_DIRECTION_MAP, $direction);
    @return $mar_selector_directional_base;
  }

  // `s:mar-1`
  @if not $direction and $mediaquery and not $pseudoselector {
     @return get_media_query_selector($mar_selector_base, $mediaquery);
  }

  // `mar-1:focus`
  @if not $direction and not $mediaquery and $pseudoselector {
    @return get_pseudoselector_selector($mar_selector_base, $pseudoselector);
  }

  // `s:mar-t-2`
  @if $direction and $mediaquery and not $pseudoselector {
    $direction--key: map.get($COMMON_DIRECTION_MAP, $direction);
    @return get_media_query_selector($mar_selector_directional_base, $mediaquery);
  }

  // `mar-t-2:focus`
  @if $direction and not $mediaquery and $pseudoselector {
    @return get_pseudoselector_selector($mar_selector_directional_base, $pseudoselector);
  }

  // `s:mar-1:focus`
  @if not $direction and $mediaquery and $pseudoselector {
    @return get_media_query_selector(get_pseudoselector_selector($mar_selector_base, $pseudoselector), $mediaquery);
  }

  // `s:mar-t-2:focus`
  @if $direction and $mediaquery and $pseudoselector {
    @return get_media_query_selector(get_pseudoselector_selector($mar_selector_directional_base, $pseudoselector), $mediaquery);
  }
}

@mixin generate_margin_styles($value, $direction: false, $mediaquery: false, $pseudoselector: false) {
  $selector_name_base: get_margin_style_selector($value, $direction, $mediaquery, $pseudoselector);
  $calculated_margin_value: $margin--base-size * $value;

  // no directions given means all sides
  @if not $direction {
    .#{$selector_name_base} {
      margin: $calculated_margin_value;
    }

  // left, right
  } @else if $direction == "horizontal" {
    .#{$selector_name_base} {
      margin-left: $calculated_margin_value;
      margin-right: $calculated_margin_value;
    }

  // top, bottom
  } @else if $direction == "vertical" {
    .#{$selector_name_base} {
      margin-top: $calculated_margin_value;
      margin-bottom: $calculated_margin_value;
    }

  // cardinal directions, eg. left, right, top, down
  } @else {
    .#{$selector_name_base} {
      margin-#{$direction}: $calculated_margin_value;
    }
  }
}

/* start -- margins */
@for $value from 0 through 9 {
  // basic version with just colors
  @include generate_margin_styles($value);

  // all directions
  @each $direction_name, $direction_key in $COMMON_DIRECTION_MAP {
    @include generate_margin_styles($value, $direction_name);

    // breakpoints
    @each $mediaquery, $mq_key in $MEDIA_QUERY_KEY_MAP {
      @include apply_media_query($mediaquery) {
        @include generate_margin_styles($value, $direction_name, $mediaquery);

        // pseudoselectors
        @each $pseudoselector, $ps_key in $PSEUDOSELECTOR_MAP {
          @include generate_margin_styles($value, $direction_name, $mediaquery, $pseudoselector);
        }
      }
    }
  }
}
/* end -- margins */
